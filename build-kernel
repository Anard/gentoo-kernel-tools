#!/bin/sh
# Script for building new or updated kernel
version="1.2"; script_name=`basename "$0"`

# Config
#load
configPath="/usr/lib"
if [ -f "${configPath}/shell-text.cnf" ]; then
	source "${configPath}/shell-text.cnf"
fi
configPath="/etc/conf.d"
localPath="/home/$(logname)/.config"
configFile="build-kernel.cnf"
source "${configPath}/${configFile}"
if [ -f "${localPath}/${configFile}" ]; then
	source "${localPath}/${configFile}"
fi
#control & default config
case "$GRUB" in
	1|'yes')
		GRUB=1
		;;	
	0|'no')
		GRUB=0
		;;
	*)
		GRUB=0
		echo -e "${red}GRUB parameter unknown${normal}, Grub won't be updated" >&2
		;;
esac
case "$INITRAMFS" in
	'genkernel'|'dracut'|'no')
		;;
	*)
		INITRAMFS='no'
		echo -e "${red}INITRAMFS parameter unknown${normal}, won't build initramfs image" >&2
		;;
esac
case "$CONFIG_TOOL" in
	'xconfig'|'gconfig'|'nconfig')
		;;
	*)
		CONFIG_TOOL='menuconfig'
		echo -e "${red}CONFIG_TOOL parameter unknown${normal}, using menuconfig" >&2
		;;
esac


# test if running on a bare VT
if [ "$TERM" = linux ]; then
    TERM=xterm     #so make menuconfig will display correctly
fi

# try to get MAKEOPTS from /etc/portage/make.conf
makeFile="/etc/portage/make.conf"
if [ -f "${makeFile}" ]; then
    source "${makeFile}"
else
    # run nproc to get the number of cores
    NPROC=$( nproc )
    NPROC=$((NPROC+1))
    MAKEOPTS="-j${NPROC}"
fi

cd /usr/src/linux || { echo -e "${red}/usr/src/linux not found${normal} Did you forget 'eselect kernel set' ?" >&2 && exit 255 ; }

# Functions
# config_found tests if config is set, parameter is new file to process
config_found() {
	if [ $config_set -gt 0 ]; then
		echo -e "${orange}Config file already found, skipping $1...${normal}"
		return 1
	else
		return 0
	fi
}
# copy_builtin tries to copy /proc/config.gz to /usr/src/linux/.config or exit
copy_builtin() {
	zcat /proc/config.gz >.config || { echo -e "${red}Unable to write config from current kernel used${normal}, please choose a kernel configuration or use 'build-kernel --help'" >&2 && exit 255 ; }
	return 0
}

# Get parameters
config_set=0

while [ $# -gt 0 ]; do

	case "$1" in
	  "-h"|"--help")
		# HELP
		help=$( cat << HELP
${bold}Script for building new or updated kernel${normal}
Usage : ${Blue}build-kernel${normal} [${Green}OPTIONS${normal}] [${Green}DIRECTORY${normal}|${Green}FILE${normal}]
If no config file set, present kernel's built-in config will be used (/proc/config.gz)

${Green}OPTIONS${normal} :
	${bold}-h|--help${normal}	Print this help and exit
	${bold}-v|--version${normal}	Print this script's current version and exit

	${bold}-c|--current${normal}	use existing /usr/src/linux/.config
	${bold}-w|--working${normal}	use working /proc/config.gz
 
	${underline}Options to ignore build-kernel config files${normal}
	${bold}--(no)grub|--grub=<0|1>${normal}	force updating (or not) Grub
	${bold}--noinitramfs${normal}		force to skip initramfs image generation
	${bold}--genkernel${normal}		force using genkernel tool to create initramfs image
	${bold}--dracut${normal}		force using dracut tool to create initramfs image

${Green}DIRECTORY${normal} :	Path to .config file to use

${Green}FILE${normal} :		Config file to use

HELP
)
		echo -e "$help"
		exit 0
		;;

      "-v"|"--version")
		echo -e "${Orange}${script_name}${normal} from kernel-tools, version ${orange}${version}${normal}"
		exit 0
		;;

       "-c"|"--current")
		# use .config file included in /usr/src/linux
		config_found ".config" || { shift && continue 2; }
		if [ -f ".config" ]; then
			echo -e "${orange}Using current .config file in /usr/src/linux${normal}"
			config_set=1
		else
			echo -e "${red}/usr/src/linux/.config doesn't exist${normal}, please choose an existing config file"
			exit 255
		fi
		;;

       "-w"|"--working")
		# use current working /proc/config.gz
		config_found "/proc/config.gz" || { shift && continue 2; }
		if [ -f "/proc/config.gz" ]; then
			echo -e "${orange}Using current working /proc/config.gz file${normal}"
			zcat /proc/config.gz >.config
			config_set=1
		else
			echo -e "${red}/proc/config.gz doesn't exist${normal}, please choose an existing config file"
			exit 255
		fi
		;;

	  "--grub"|"--grub=1")
		GRUB=1
		;;
	  "--nogrub"|"--grub=0")
		GRUB=0
		;;

	  "--noinitramfs")
		INITRAMFS='no'
		;;
	  "--genkernel")
		INITRAMFS='genkernel'
		;;
	  "--dracut")
		INITRAMFS='dracut'
		;;

	  *)
		if [ -d "$1" ]; then
			folder=${1%/}
			config_found "${folder}/.config" || { shift && continue 2; }
			if [ ! "$folder" = "/usr/src/linux" ]; then
					cp "$folder/.config" .config || exit 255;
			fi
			echo -e "${orange}Config is $folder/.config${normal}"

		elif [ -f "$1" ]; then
			config_found "${1}" || { shift && continue 2; }
			( cp "$1" .config && echo -e "${orange}Config is $1${normal}") || exit 255;

		else
			echo -e "${red}No configuration found for $1${normal}, use 'build-kernel --help' for available options" >&2
			exit 255
		fi
		config_set=1
		;;
	esac

	shift
done

# no config file given
if [ $config_set -lt 1 ]; then
    echo -e "${orange}Using present kernel's built-in config${normal}"
	if [ -f .config ]; then
		zdiff -q /proc/config.gz .config
		if [ $? -gt 0 ]; then
			question=$( cat << QUESTION
${bold}Which configuration do you want to use ?${normal}
${bold}w${normal} for ${bold}working${normal} /proc/config.gz (default)
${bold}c${normal} for ${bold}current${normal} /usr/src/linux/.config
${bold}d${normal} to show ${bold}differences${normal} side by side
^C to abort
--> 

QUESTION
)
			while true;	do

				read -p "$question" ans

				case "$ans" in
					"w"|"W"|"working"|"")	
						echo -e "${orange}Using current working /proc/config.gz file${normal}"
						copy_builtin
						break 2
						;;

					"c"|"C"|"current")
						echo -e "${orange}Using current .config file in /usr/src/linux${normal}"
						break 2
						;;

					"d"|"D"|"diff"|"difference"|"differences")
						echo "Working | Current"
						zdiff -y --suppress-common-lines /proc/config.gz .config
						echo
						;;

					*)
						echo "Unknown answer (W/c/d ?)"
						;;
				esac
			done
		fi
	else copy_builtin	
	fi
fi

# At this point we should compare kernel versions and make oldconfig if the base version has updated
make oldconfig
make ${CONFIG_TOOL} || {
	echo -e "${red}Impossible to launch the configuration tool${normal}"
	question=$( cat << QUESTION
${bold}Do you want to build script without editing kernel's configuration file ?${normal} (Y/n)
--> 

QUESTION
)
	while true;	do

		read -p "$question" ans

		case "$ans" in
			[nN]*)	
				echo -e "${orange}Exiting...${normal}"
				exit 0
				;;

			[yY]*|'')
				break 2
				;;

			*)
				echo "Unknown answer (Y/n ?)"
				;;

		esac
	done
}

# Actually build
echo
echo -e "${green}Building kernel...${normal}"
make ${MAKEOPTS} || {  echo -e "${red}make ${MAKEOPTS} failed${normal}"; exit 1; }

# install into /boot
make ${MAKEOPTS} modules_install || { echo -e "${red}make modules_install failed${normal}";  exit 2; }
make ${MAKEOPTS} install

# update initramfs
if [ "$INITRAMFS" != 'no'  ]; then
	echo
	echo -e "${green}Updating initramfs image...${normal}"
	case $INITRAMFS in
		'genkernel')
			genkernel --no-clean initramfs || { echo -e '${red}Unable to create Initramfs image with genkernel tool$(normal}'; exit 3; }
			;;

		'dracut')
			kver=$(make -s kernelrelease)
			dracut -f --kver "${kver}" || { echo -e '${red}Unable to create Initramfs image with dracut tool$(normal}'; exit 3; }	
			;;

		*)
			echo -e "${orange}Tool '${INITRAMFS} unknown to create initramfs image, skipping...${normal}"
			;;
	esac
fi

# virtualbox modules, nvidia etc.
echo
echo -e "${green}Building Out of Kernel modules${normal}"
emerge -q @module-rebuild

# finished
echo
echo -e "${Green}Done, kernel built${normal}" 

# update bootloader
if [ $GRUB -gt 0 ]; then
    echo -e "${green}Updating Grub bootloader...${normal}"
    update-grub || echo -e "${orange}Unable to update Grub bootloader, skipping...${normal}"
else
    echo "Don't forget to update your bootloader"
fi

exit 0
