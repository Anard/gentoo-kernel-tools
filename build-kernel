#!/bin/sh
# Script for building new or updated kernel
version="1.01-r3"; script_name=`basename "$0"`

# parameter set on emerging file if USE flag grub is set
grub=0

configPath="/usr/lib"
if [ -f ${configPath}/shell-text.cnf ]; then
	source ${configPath}/shell-text.cnf
fi

# test if running on a bare VT
if [ "$TERM" = linux ]; then
    TERM=xterm     #so make menuconfig will display correctly
fi

# try to get MAKEOPTS from /etc/portage/make.conf
makeFile="/etc/portage/make.conf"
if [ -f "${makeFile}" ]; then
    . "${makeFile}"
else
    # run nproc to get the number of cores
    NPROC=$( nproc )
    NPROC=$((NPROC+1))
    MAKEOPTS="-j${NPROC}"
fi

cd /usr/src/linux || { echo -e "${red}/usr/src/linux not found${normal} Did you forget 'eselect kernel set' ?" >&2 && exit 255 ; }

# Optional Parameter #1 is the location of the config file used
# if omitted the running kernel's internal configuration is used
if [ $# -gt 0 ]; then
    if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		# HELP
		help=$( cat << HELP
${bold}Script for building new or updated kernel${normal}
Usage : ${Blue}build-kernel${normal} [${Green}OPTION${normal}|${Green}DIRECTORY${normal}|${Green}FILE${normal}]
If nothing set, present kernel's built-in config will be used (/proc/config.gz)

${Green}OPTION${normal} :
	${bold}-h|--help${normal}	Print this help
	${bold}-v|--version${normal}	Print this script's current version

	${bold}-c|--current${normal}	use existing /usr/src/linux/.config

${Green}DIRECTORY${normal} :	Path to .config file to use

${Green}FILE${normal} :		Config file to use

HELP
)
		echo -e "$help"
		exit 0

    elif [ "$1" = "-v" ] || [ "$1" = "--version" ]; then
		echo -e "${Orange}${script_name}${normal} script, version ${orange}${version}${normal}"
		exit 0

    elif [ "$1" = "-c" ] || [ "$1" = "--current" ]; then
	# use .config file included in /usr/src/linux
		if [ -f ".config" ]; then
			echo -e "${orange}Using current .config file in /usr/src/linux${normal}"
		else
			echo -e "${red}/usr/src/linux/.config doesn't exist${normal}, please choose an existing config file"
			exit 255
		fi

    elif [ -d "$1" ]; then
		folder=${1%/}
		if [ ! "$folder" = "/usr/src/linux" ]; then
			    cp "$folder/.config" .config || exit 255;
		fi
		echo -e "${orange}Config is $folder/.config${normal}"

    elif [ -f "$1" ]; then
    	( cp "$1" .config && echo -e "${orange}Config is $1${normal}") || exit 255;
    else
		echo -e "${red}No configuration found for $1${normal}, use 'build-kernel --help for available options'"; exit 255;
    fi

    
else
    echo -e "${orange}Using present kernel's built-in config${normal}"
    zcat /proc/config.gz >.config || { echo -e "${red}Unable to write config from current kernel used${normal}, please choose a kernel configuration or use 'build-kernel --help'" >&2 && exit 255 ; }
fi

# At this point we should compare kernel versions and make oldconfig if the base version has updated
make oldconfig
make menuconfig

# Actually build
echo
echo -e "${green}Building kernel...${normal}"
make ${MAKEOPTS} || {  echo -e "${red}make ${MAKEOPTS} failed${normal}"; exit 1; }

# install into /boot
make ${MAKEOPTS} modules_install || { echo -e "${red}make modules_install failed${normal}";  exit 2; }
make ${MAKEOPTS} install

# no longer needed but left in as an example
# kver="$(eselect kernel list | awk '{gsub("linux-","") ; if ($3 ~ "*") print $2}')"
# i.e. kver contains 4.9.9-gentoo

# update initramfs
echo
echo -e "${green}Updating initramfs image...${normal}"
if [ -f /usr/bin/dracut ]; then
    kver=$(make -s kernelrelease)
    dracut -f --kver "${kver}"

elif [ -f /usr/bin/genkernel ]; then
    genkernel --no-clean initramfs
else
    echo -e "${orange}Unable to find a tool to create initramfs image, skipping...${normal}"
fi

# virtualbox modules, nvidia etc.
echo
echo -e "${green}Building Out of Kernel modules${normal}"
emerge @module-rebuild

# finished
echo
echo -e "${Green}Done, kernel built${normal}" 

# update bootloader
if [ $grub -gt 0 ]; then
    echo -e "${green}Updating Grub bootloader...${normal}"
    update-grub
else
    echo "Don't forget to update your bootloader"
fi

exit 0
